# docker-compose.yml (root directory)
version: '3.8'

services:
  mongo1:
    image: mongo:latest
    container_name: mongo1
    command: ["--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data1:/data/db
    networks:
      - mongodb_network
    healthcheck:
      test: mongosh --eval "try { rs.status() } catch (err) { rs.initiate() }"
      interval: 10s
      timeout: 5s
      retries: 5

  mongo2:
    image: mongo:latest
    container_name: mongo2
    command: ["--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27018:27017"
    volumes:
      - mongodb_data2:/data/db
    networks:
      - mongodb_network
    depends_on:
      - mongo1

  mongo3:
    image: mongo:latest
    container_name: mongo3
    command: ["--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27019:27017"
    volumes:
      - mongodb_data3:/data/db
    networks:
      - mongodb_network
    depends_on:
      - mongo1

  mongo-init:
    image: mongo:latest
    networks:
      - mongodb_network
    depends_on:
      mongo1:
        condition: service_healthy
    command: >
      mongosh --host mongo1:27017 --eval '
        rs.initiate({
          _id: "rs0",
          members: [
            {_id: 0, host: "mongo1:27017"},
            {_id: 1, host: "mongo2:27017"},
            {_id: 2, host: "mongo3:27017"}
          ]
        });
      '

  backend:
    build: ./BackEnd
    ports:
      - "8000:8000"
    volumes:
      - ./BackEnd:/app
      - ./uploads:/app/uploads
    environment:
      - MONGODB_URL=mongodb://mongo1:27017,mongo2:27017,mongo3:27017/?replicaSet=rs0
      - DATABASE_NAME=summarization_db
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY:-yoursecretkeyhere}
    networks:
      - mongodb_network
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - redis

  frontend:
    build: ./FrontEnd
    ports:
      - "3000:80"
    volumes:
      - ./FrontEnd:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000/api/v1
    depends_on:
      - backend

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

networks:
  mongodb_network:
    driver: bridge

volumes:
  mongodb_data1:
  mongodb_data2:
  mongodb_data3:
  elasticsearch_data: